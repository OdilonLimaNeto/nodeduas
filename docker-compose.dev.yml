version: "3.8"

services:
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    env_file:
      - ./envs/.env.dev
    volumes:
      # Hot reload - bind mount source code
      - ./src:/app/src:ro
      - ./prisma:/app/prisma:ro
      - ./package.json:/app/package.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./nest-cli.json:/app/nest-cli.json:ro
    ports:
      - "3000:3000"
      - "9229:9229" # Debug port
    environment:
      - NODE_ENV=development
    command: npm run start:dev
    depends_on:
      db:
        condition: service_healthy
      localstack:
        condition: service_healthy
    networks:
      - app-network

  db:
    environment:
      POSTGRES_DB: nodeduasapi
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  localstack:
    image: localstack/localstack:3
    container_name: no-de-duas-localstack
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    environment:
      # Core LocalStack configuration
      - SERVICES=s3
      - DEBUG=1
      - PERSISTENCE=1
      
      # S3 specific configuration
      - S3_BUCKET_NAME=no-de-duas
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    volumes:
      # Mount Docker socket for Lambda execution
      - "/var/run/docker.sock:/var/run/docker.sock"
      
      # Mount initialization scripts
      - "./localstack/init:/etc/localstack/init/ready.d"
      
      # Persistence volume for LocalStack data
      - "localstack_data:/var/lib/localstack"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app-network

volumes:
  postgres_dev_data:
  localstack_data:

networks:
  app-network:
    driver: bridge
