### Variables
@baseUrl = http://localhost:3000
@contentType = application/json

### === AUTHENTICATION ROUTES ===

### 1. Login - Get Access & Refresh Tokens
# @name login
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "admin@example.com",
  "password": "admin123"
}

### Store tokens from login response
@accessToken = {{login.response.body.access_token}}
@refreshToken = {{login.response.body.refresh_token}}

### 2. Refresh Tokens
# @name refresh
POST {{baseUrl}}/auth/refresh
Content-Type: {{contentType}}

{
  "refresh_token": "{{refreshToken}}"
}

### 3. Get User Profile (Protected Route)
GET {{baseUrl}}/auth/profile
Authorization: Bearer {{accessToken}}

### 4. Logout
POST {{baseUrl}}/auth/logout
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "refresh_token": "{{refreshToken}}"
}

### === USER MANAGEMENT ROUTES ===

### 5. Create New User
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "Thayná Feitoza",
  "email": "thay@nodeduas.com",
  "password": "password123",
  "roles": ["admin"]
}

### 6. Get All Users
GET {{baseUrl}}/users
Authorization: Bearer {{accessToken}}

### 7. Get User by ID
@userId = b2e28bf7-8c99-4abe-89c1-bc9e1dd70bbb
GET {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{accessToken}}

### 8. Update User
PATCH {{baseUrl}}/users/{{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "Thayná Feitoza",
  "email": "thay@nodeduas.com",
  "isActive": false
}

### 9. Update User with Roles  
PATCH {{baseUrl}}/users/{{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "Thayná Admin",
  "roles": ["user"]
}

### 10. Update User Password
PATCH {{baseUrl}}/users/{{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "password": "newPassword123"
}

### === TESTING CUSTOM EXCEPTIONS ===

### 11. Test Invalid Credentials
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "wrong@example.com",
  "password": "wrongpassword"
}

### 12. Test User Not Found
GET {{baseUrl}}/users/invalid-user-id
Authorization: Bearer {{accessToken}}

### 13. Test User Already Exists
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "Duplicate User",
  "email": "admin@example.com",
  "password": "password123"
}

### 14. Test Invalid User Data
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "",
  "email": "invalid-email",
  "password": "123"
}

### 15. Test Expired/Invalid Token
GET {{baseUrl}}/auth/profile
Authorization: Bearer invalid-token-here

### 16. Test Invalid Refresh Token
POST {{baseUrl}}/auth/refresh
Content-Type: {{contentType}}

{
  "refresh_token": "invalid-refresh-token"
}

### 17. Test Unauthorized Access (No Token)
GET {{baseUrl}}/users
# No Authorization header

### === ROLE & PERMISSIONS TESTING ===

### 18. Create User with Invalid Role
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "Test User",
  "email": "test@example.com",
  "password": "password123",
  "roles": ["invalid-role", "another-invalid-role"]
}

### 19. Update User with Invalid Role
PUT {{baseUrl}}/users/{{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "roles": ["non-existent-role"]
}

### === ADMIN SPECIFIC ROUTES (if implemented) ===

### 20. Revoke All User Refresh Tokens (Admin)
POST {{baseUrl}}/auth/revoke-all/{{userId}}
Authorization: Bearer {{accessToken}}

### === DEVELOPMENT & TESTING HELPERS ===

### 21. Create Admin User (for initial setup)
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
  "name": "System Admin",
  "email": "admin@example.com",
  "password": "admin123",
  "roles": ["admin"]
}

### 22. Create Regular User
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "Regular User",
  "email": "user@example.com",
  "password": "user123",
  "roles": ["user"]
}

### 23. Create Moderator User
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "Moderator User",
  "email": "moderator@example.com",
  "password": "mod123",
  "roles": ["moderator"]
}

### === BULK OPERATIONS ===

### 24. Get User with Full Role Details
GET {{baseUrl}}/users/{{userId}}/roles
Authorization: Bearer {{accessToken}}

### 25. Deactivate User
PATCH {{baseUrl}}/users/{{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "isActive": false
}

### 26. Reactivate User
PATCH {{baseUrl}}/users/{{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "isActive": true
}

### === ERROR SCENARIOS FOR TESTING ===

### 27. Test Empty Request Body
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{}

### 28. Test Missing Required Fields
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "Incomplete User"
}

### 29. Test Malformed JSON
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "test@example.com"
  "password": "missing-comma"
}

### === PRODUCTS MANAGEMENT ROUTES ===

### 30. Get All Products (Public)
GET {{baseUrl}}/products

### 31. Get Featured Products (Public)
GET {{baseUrl}}/products/featured

### 32. Get All Products including inactive (Admin)
GET {{baseUrl}}/products?includeInactive=true
Authorization: Bearer {{accessToken}}

### 33. Get Product by ID (Public)
@productId = product-example-1
GET {{baseUrl}}/products/{{productId}}

### 34. Create New Product
POST {{baseUrl}}/products
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "Produto Teste API",
  "description": "Produto criado via API para teste",
  "price": 199.99,
  "originalPrice": 249.99,
  "category": "Eletrônicos",
  "isActive": true,
  "isFeatured": true,
  "rating": 4.8,
  "reviewCount": 15
}

### 35. Update Product
PATCH {{baseUrl}}/products/{{productId}}
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "Produto Atualizado",
  "price": 179.99,
  "description": "Descrição atualizada do produto"
}

### 36. Deactivate Product
PATCH {{baseUrl}}/products/{{productId}}/deactivate
Authorization: Bearer {{accessToken}}

### 37. Activate Product
PATCH {{baseUrl}}/products/{{productId}}/activate
Authorization: Bearer {{accessToken}}

### === PRODUCTS TESTING ===

### 38. Test Product Not Found
GET {{baseUrl}}/products/invalid-product-id

### 39. Test Product Already Exists
POST {{baseUrl}}/products
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "Produto Exemplo 1",
  "price": 99.99,
  "category": "Teste"
}

### 40. Test Invalid Product Data
POST {{baseUrl}}/products
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "",
  "price": -10,
  "category": ""
}

### === PRODUCT IMAGES MANAGEMENT ===

### 41. Generate Upload URLs for Product Images
# @name generateUploadUrls
POST {{baseUrl}}/products/{{productId}}/images/upload-urls
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "files": [
    {
      "fileName": "product-image-5.jpg",
      "contentType": "image/jpeg"
    }
  ]
}

### Store upload data from response
@uploadUrl = {{generateUploadUrls.response.body.$[0].uploadUrl}}
@imageKey = {{generateUploadUrls.response.body.$[0].key}}

### 42. Confirm Upload (after uploading to S3)
POST {{baseUrl}}/products/{{productId}}/images/confirm
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "uploads": [
    {
      "key": "{{imageKey}}",
      "altText": "Product main image"
    }
  ]
}

### 43. Get Product Images (Public)
GET {{baseUrl}}/products/{{productId}}/images

### 44. Reorder Product Images
PATCH {{baseUrl}}/products/{{productId}}/images/reorder
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "imageOrders": [
    {
      "id": "1d828d4b-0a38-4c07-82de-b45e768d0195",
      "sortOrder": 2
    },
    {
      "id": "62c5b792-0163-427c-bf5e-64b215dc5c84", 
      "sortOrder": 1
    }
  ]
}

### 45. Delete Product Image
@imageId = 9941e24c-f774-4e1b-ba77-10d724fd8c09
DELETE {{baseUrl}}/products/{{productId}}/images/{{imageId}}
Authorization: Bearer {{accessToken}}

### 46. Get Upload Configuration (Public)
GET {{baseUrl}}/products/{{productId}}/images/config

### === PRODUCT IMAGES TESTING ===

### 47. Test Max Images Limit (should fail after 3 images)
POST {{baseUrl}}/products/{{productId}}/images/upload-urls
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "files": [
    { "fileName": "image4.jpg", "contentType": "image/jpeg" },
    { "fileName": "image5.jpg", "contentType": "image/jpeg" }
  ]
}

### 48. Test Invalid File Type
POST {{baseUrl}}/products/{{productId}}/images/upload-urls
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "files": [
    {
      "fileName": "document.pdf",
      "contentType": "application/pdf"
    }
  ]
}

### === EXEMPLO COMPLETO: ADMIN FAZENDO UPLOAD DE 1 IMAGEM ===

### PASSO 1: Solicitar URL de Upload
# @name requestUpload
POST {{baseUrl}}/products/{{productId}}/images/upload-urls
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "files": [
    {
      "fileName": "produto-destaque.jpg",
      "contentType": "image/jpeg"
    }
  ]
}

### PASSO 2: Pegar URL da resposta (copie manualmente da resposta acima)
@uploadUrl = https://meu-bucket.s3.us-east-1.amazonaws.com/products/product-example-1/a1b2c3d4.jpg?X-Amz-Algorithm=...
@imageKey = products/product-example-1/a1b2c3d4.jpg

### PASSO 3: Upload para S3 (SIMULAR - na prática seria feito pelo frontend)
# PUT {{uploadUrl}}
# Content-Type: image/jpeg
# 
# [ARQUIVO BINÁRIO produto-destaque.jpg]

### PASSO 4: Confirmar Upload Concluído
POST {{baseUrl}}/products/{{productId}}/images/confirm
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "uploads": [
    {
      "key": "{{imageKey}}",
      "altText": "Produto em destaque - Imagem principal"
    }
  ]
}

### VERIFICAR: Listar imagens do produto
GET {{baseUrl}}/products/{{productId}}/images

### === STOCK MANAGEMENT ROUTES ===

### 61. Get Product Stock Information
GET {{baseUrl}}/stock/{{productId}}
Authorization: Bearer {{accessToken}}

### 62. Update Product Stock
PATCH {{baseUrl}}/stock/{{productId}}
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "stockQuantity": 100,
  "minStockLevel": 10,
  "maxStockLevel": 200,
  "stockStatus": "IN_STOCK"
}

### 63. Adjust Stock - Increase
POST {{baseUrl}}/stock/{{productId}}/adjust
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "operation": "increase",
  "quantity": 50,
  "reason": "New stock received"
}

### 64. Adjust Stock - Decrease
POST {{baseUrl}}/stock/{{productId}}/adjust
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "operation": "decrease",
  "quantity": 25,
  "reason": "Sale completed"
}

### 65. Adjust Stock - Set
POST {{baseUrl}}/stock/{{productId}}/adjust
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "operation": "set",
  "quantity": 75,
  "reason": "Inventory count adjustment"
}

### 66. Get Low Stock Products
GET {{baseUrl}}/stock/low
Authorization: Bearer {{accessToken}}

### 67. Get Out of Stock Products
GET {{baseUrl}}/stock/out-of-stock
Authorization: Bearer {{accessToken}}

### 68. Get Stock Summary Report
GET {{baseUrl}}/stock/summary
Authorization: Bearer {{accessToken}}

### 69. Get Products by Stock Status
GET {{baseUrl}}/stock/status?status=LOW_STOCK
Authorization: Bearer {{accessToken}}

### 70. Get Low Stock Only
GET {{baseUrl}}/stock/status?lowStockOnly=true
Authorization: Bearer {{accessToken}}

### 71. Get Out of Stock Only
GET {{baseUrl}}/stock/status?outOfStockOnly=true
Authorization: Bearer {{accessToken}}

### === PROMOTIONS MANAGEMENT ROUTES ===

### 72. Get Active Promotions (Public)
GET {{baseUrl}}/promotions/active

### 73. Get Hero Promotions (Public)
GET {{baseUrl}}/promotions/hero

### 74. Get All Promotions (Public)
GET {{baseUrl}}/promotions

### 75. Get Promotions with Filters
GET {{baseUrl}}/promotions?activeOnly=true&heroOnly=false
GET {{baseUrl}}/promotions?includeExpired=true

### 76. Get Promotions by Product (Public)
GET {{baseUrl}}/promotions/product/{{productId}}

### 77. Get Promotion by ID (Public)
@promotionId = promotion-example-1
GET {{baseUrl}}/promotions/{{promotionId}}

### 78. Create New Promotion
POST {{baseUrl}}/promotions
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "productId": "{{productId}}",
  "title": "Promoção Flash de Verão",
  "description": "Desconto especial por tempo limitado",
  "discountPercentage": 25,
  "isHeroPromotion": true,
  "isActive": true,
  "startDate": "2024-01-15T00:00:00.000Z",
  "endDate": "2024-02-15T23:59:59.000Z"
}

### 79. Update Promotion
PATCH {{baseUrl}}/promotions/{{promotionId}}
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "title": "Promoção Flash - Atualizada",
  "discountPercentage": 30,
  "description": "Desconto ainda maior por tempo limitado!"
}

### 80. Activate Promotion
PATCH {{baseUrl}}/promotions/{{promotionId}}/activate
Authorization: Bearer {{accessToken}}

### 81. Deactivate Promotion
PATCH {{baseUrl}}/promotions/{{promotionId}}/deactivate
Authorization: Bearer {{accessToken}}

### 82. Get Promotions Summary (Admin/Moderator)
GET {{baseUrl}}/promotions/summary
Authorization: Bearer {{accessToken}}

### 83. Delete Promotion (Admin Only)
DELETE {{baseUrl}}/promotions/{{promotionId}}
Authorization: Bearer {{accessToken}}

### === PROMOTIONS TESTING ===

### 84. Test Promotion Not Found
GET {{baseUrl}}/promotions/invalid-promotion-id

### 85. Test Create Promotion with Invalid Product
POST {{baseUrl}}/promotions
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "productId": "invalid-product-id",
  "title": "Promoção Inválida",
  "discountPercentage": 20
}

### 86. Test Invalid Promotion Dates
POST {{baseUrl}}/promotions
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "productId": "{{productId}}",
  "title": "Promoção com Datas Inválidas",
  "discountPercentage": 15,
  "startDate": "2024-02-15T00:00:00.000Z",
  "endDate": "2024-01-15T23:59:59.000Z"
}

### 87. Test Duplicate Promotion Title
POST {{baseUrl}}/promotions
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "productId": "{{productId}}",
  "title": "Promoção de Lançamento",
  "discountPercentage": 20
}

### 88. Test Invalid Discount Percentage
POST {{baseUrl}}/promotions
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "productId": "{{productId}}",
  "title": "Promoção Inválida",
  "discountPercentage": 150
}

### === NOTES ===
# 1. Replace {{userId}} with actual user ID from responses
# 2. Update {{accessToken}} and {{refreshToken}} after each login
# 3. Adjust {{baseUrl}} if running on different port
# 4. Some routes may require specific roles/permissions
# 5. Custom exceptions will return structured error responses

### === SAMPLE RESPONSES ===
# Login Success:
# {
#   "access_token": "eyJhbGciOiJIUzI1...",
#   "refresh_token": "eyJhbGciOiJIUzI1...",
#   "user": {
#     "id": "uuid",
#     "email": "admin@example.com",
#     "name": "Admin User",
#     "roles": ["admin"]
#   }
# }

# Error Response:
# {
#   "statusCode": 401,
#   "message": "Invalid credentials provided",
#   "error": "InvalidCredentialsException",
#   "timestamp": "2024-01-15T14:30:25.123Z",
#   "path": "/auth/login"
# }
